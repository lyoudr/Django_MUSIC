
stages :
  - build
  - deploy 

variables :
  CLUSTER : "music"
  PROJECT_NAME : "music"
  CLUSTER_CONFIG : "music-config"
  ECS_PROFILE : "music-profile"

# Build and push all Dockerfile (nginx, music_server) used in docker-compose to Docker Hub first.
job_build_template :
  stage : build
  image : docker:19.03
  script :
    - echo $DOCKER_USER
    - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    
    # build nginx
    - >-
      docker build 
      -f Dockerfile.nginx 
      -t nginx:latest .
    - docker tag nginx:latest lyoudr/nginx_public:latest
    - docker push lyoudr/nginx_public:latest

    # build server
    - >- 
      docker build 
      -f Dockerfile.server 
      -t music_server:latest
      --build-arg ENV=$ENV
      --build-arg STATIC_ROOT=$STATIC_ROOT
      --build-arg DB_NAME=$DB_NAME
      --build-arg DB_USER=$DB_USER
      --build-arg DB_PASSWORD=$DB_PASSWORD
      --build-arg DB_HOST=$DB_HOST
      --build-arg AWS_STORAGE_BUCKET_NAME=$AWS_STORAGE_BUCKET_NAME
      --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      --no-cache .

    - docker tag music_server:latest lyoudr/music_public:music_1 
    - docker push lyoudr/music_public:music_1
    - docker logout $DOCKER_PASSWORD

  only :
   - ecs_fargate
  tags : 
   - ann

# Need to create cluster by hand , and use ecs-cli command to deploy docker-compose file to AWS ECS Fargate here.
job_deploy_template :
  stage : deploy
  image : 
    name : amazon/aws-cli
    entrypoint : [""]
  before_script :
    - aws configure set region $AWS_DEFAULT_REGION
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
  script :
    - >-
      aws ecs update-service
      --cluster music
      --service music
      --desired-count 1
      --force-new-deployment
    - aws ecs wait services-stable --services music --cluster music
  only :
   - ecs_fargate
  tags : 
   - ann